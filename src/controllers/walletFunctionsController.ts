/**
 * Beepo Core MicroserviceLib
 *
 * This file was automatically generated by APIMATIC v3.0 ( https://www.apimatic.io ).
 */

import { ApiResponse, RequestOptions } from '../core';
import { Example111, example111Schema } from '../models/example111';
import { string } from '../schema';
import { BaseController } from './baseController';

export class WalletFunctionsController extends BaseController {
  /**
   * **Recover Seed Phrase**
   *
   * Recover your account seed phrase, if for some reason the client needs to get the seed phrase again
   * after user creation, this endpoint is to be used. It requires authentication, therefore, the access
   * token must be attached accordingly.
   *
   * @param beepoCoreContextId    The id of the crypto context to use for RSA encryption/decryption between
   *                                        the server and client.
   * @param beepoCoreBearer
   * @return Response from the API call
   */
  async recoverSeedphrase(
    beepoCoreContextId: string,
    beepoCoreBearer: string,
    requestOptions?: RequestOptions
  ): Promise<ApiResponse<Example111>> {
    const req = this.createRequest('GET', '/wallet/recover-seedphrase');
    const mapped = req.prepareArgs({
      beepoCoreContextId: [beepoCoreContextId, string()],
      beepoCoreBearer: [beepoCoreBearer, string()],
    });
    req.header('beepo-core-context-id', mapped.beepoCoreContextId);
    req.header('beepo-core-bearer', mapped.beepoCoreBearer);
    return req.callAsJson(example111Schema, requestOptions);
  }

  /**
   * Fetch All Coin Wallets
   *
   * @param beepoCoreBearer       Acess token for authentication
   * @param beepoCoreContextId    The ID of the context to use for encryption/decryption purposes.
   * @return Response from the API call
   */
  async fetchAllCoinWallets(
    beepoCoreBearer: string,
    beepoCoreContextId: string,
    requestOptions?: RequestOptions
  ): Promise<ApiResponse<void>> {
    const req = this.createRequest('GET', '/wallet/coins');
    const mapped = req.prepareArgs({
      beepoCoreBearer: [beepoCoreBearer, string()],
      beepoCoreContextId: [beepoCoreContextId, string()],
    });
    req.header('beepo-core-bearer', mapped.beepoCoreBearer);
    req.header('beepo-core-context-id', mapped.beepoCoreContextId);
    return req.call(requestOptions);
  }
}
